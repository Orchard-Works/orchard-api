name: Deploy to Ubuntu Server

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set lowercase image name
        run: |
          echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Verify image push
        run: |
          echo "Image tags:"
          echo "${{ steps.meta.outputs.tags }}"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker image ls

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set lowercase image name
        run: |
          echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Deploy to Ubuntu server
        env:
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
          GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}
          DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
          APP_KEYS: ${{ secrets.APP_KEYS }}
          API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          sed -i 's|${GITHUB_REPOSITORY}|${{ env.IMAGE_NAME }}|g' docker-compose.yml
          scp docker-compose.yml $USER@$HOST:/opt/apps/orchard-backend/
          ssh $USER@$HOST << EOF
            cd /opt/apps/orchard-backend
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            export DATABASE_CLIENT="${DATABASE_CLIENT}"
            export DATABASE_HOST="${DATABASE_HOST}"
            export DATABASE_PORT="${DATABASE_PORT}"
            export DATABASE_NAME="${DATABASE_NAME}"
            export DATABASE_USERNAME="${DATABASE_USERNAME}"
            export DATABASE_PASSWORD="${DATABASE_PASSWORD}"
            export DATABASE_SSL="${DATABASE_SSL}"
            export JWT_SECRET="${JWT_SECRET}"
            export ADMIN_JWT_SECRET="${ADMIN_JWT_SECRET}"
            export APP_KEYS="${APP_KEYS}"
            export API_TOKEN_SALT="${API_TOKEN_SALT}"
            export SENDGRID_API_KEY="${SENDGRID_API_KEY}"
            docker-compose pull
            docker-compose up -d
            docker logout ghcr.io
          EOF

